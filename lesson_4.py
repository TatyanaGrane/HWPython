# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv

script_name, working_hours, hourly_rate, bonus = argv

def salary_def():
    try:
        salary = float(working_hours) * float(hourly_rate) + float(bonus)
        print(f"Your income in this month: {salary}")

    except ValueError:
        print("Error")

salary_def()


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(f"Original list: {my_list}.")
new_list = [my_list[num] for num in range(1, len(my_list)) if my_list[num] > my_list[num - 1]]
print(f"New list: {new_list}.")


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
list_3 = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(list_3)

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
org_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list_4 = {key: val for key, val in zip([2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11], range(1, 100))}
print(list_4.keys())


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce() .
from functools import reduce

list_5 = [a for a in range(100, 1001) if a % 2 == 0]
def func_5(el_1, el_2):
    return el_1 * el_2
print(list_5)
print((reduce(func_5, list_5)))

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3.
# При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие,
# при котором повторение элементов списка прекратится.

from itertools import count, cycle
list_6_1 = []
for c in count(3, 1):
    if c > 15:
        break
    else:
        list_6_1.append(c)
print(list_6_1)

m = 0
for n in cycle(list_6_1):
    if m > 10:
        break
    print(n)
    m += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
from math import factorial
from itertools import count

def fact():
    for el in count(1):
        yield factorial(el)

f = 0
for i in fact():
    if f == 10:
        break
    else:
        f += 1
        print(f"Factorial {f} = {i}")